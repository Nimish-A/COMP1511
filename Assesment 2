
// Assignment 2 19T2 COMP1511: Castle Defense
//
// This program was written by YOUR-NAME-HERE (z5260604
// on 12-07-2019
//
// Version 1.0.0 (2019-07-22): Assignment released.
// Version 1.0.1 (2019-07-22): Fix minor style issue with print_tower.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "realm.h"

////////////////////////////////////////////////////////////////////////

// `struct realm` represents a realm, which represents the state of the
// entire program. It is mainly used to point to a linked list of 
// locations, though you may want to add other fields to it.
//
// You may need to add fields to struct realm.
struct realm {
    struct location *castle;
    struct location *lair;
    int towercheck;
};

// `struct location` represents a location, which could be a land,
// a tower, or a castle. Each of those places has a different type
// of information that this struct will need to store.
//
// You will need to add fields to struct location.
struct location {
    char name[MAX_NAME_LENGTH];
    struct enemy *enemies;
    struct location *next;
    int power; 
    int uses;
    int hp;
    int effect;
    int towercheck;
};

// `struct enemy` represents an enemy, which will move through the
// realm (to each location). Towers can deal damage to it, and
// it can deal damage to the Castle.
//
// You will need to add fields to struct enemy.
struct enemy {
    char name[MAX_NAME_LENGTH];
    struct enemy *next;
    int hp;
    int enemycheck;
};

// Add any other structs you define here.

////////////////////////////////////////////////////////////////////////

// Function prototypes for helper functions
static Location new_location(char *name);
static void print_tower(char *name, int power, int uses, Effect effect);
static void print_land(char *name);
static void print_castle(char *name, int defense);
static void print_enemy(char *name, int cur_hp, int max_hp);

static struct location *find_location(Realm realm,char *name);
static int remove_enimies(Realm realm,Location tail);
static void damage_enemies(Realm realm,Location curr);
  


////////////////////////////////////////////////////////////////////////

// You need to implement the following 9 functions.
// In other words, write code to make the function work as described 
// in realm.h.

// Create a new realm, and return a pointer to it.
Realm new_realm(void) {
    struct realm *realm = malloc(sizeof(struct realm));
    realm->lair = new_location("Lair");
    realm->castle = new_location("Castle");
    realm->castle->hp = STARTING_CASTLE_HP;
    if (realm->lair != NULL && realm->castle != NULL) {
        realm->lair->next = realm->castle;
    }
    realm->castle->towercheck = TYPE_CASTLE;
    realm->castle->enemies = NULL;
    realm->lair->enemies = NULL;  

    return realm;
}

static Location new_location(char *name) {
    struct location *new_loc = malloc(sizeof(struct location));    
    strcpy(new_loc->name,name);
    //struct enemy *enemies = malloc(sizeof(struct enemy));
    new_loc->towercheck = -1;
    new_loc->enemies = NULL;
    new_loc->power = -1;
    new_loc->uses = -1;
    new_loc->hp = -1;
    new_loc->effect = 0;
    //new_loc->enemies->hp = 0;
    
    return new_loc;
}

////////////////////////////////////////////////////////////////////////
//                         Stage 1 Functions                          //
////////////////////////////////////////////////////////////////////////

// Add a new location to the realm.
void add_location(Realm realm, char *name) {
    
    struct location *tail = realm->lair;
    while (tail->next != realm->castle) {
        tail = tail->next;
    }
    tail->next = new_location(name); 
    tail->next->next = realm->castle; 
    
   

}

// Print out the realm.
void print_realm(Realm realm) {
    
    struct location *curr = realm->lair;
    while (curr  != realm->castle) {
        
        if (curr->towercheck == TYPE_TOWER){
            print_tower(curr->name,curr->power,curr->uses,curr->effect);
            
        }else{
            print_land(curr->name);
        }
        if(curr->enemies != NULL){
            struct enemy *tail5 = curr->enemies;
            while (tail5 != NULL){
                // works for only one loop then exits/ doesnt work 
                print_enemy(tail5->name,tail5->hp,tail5->hp);
                tail5 =tail5->next;
            }

        }
        curr = curr->next; 
        if(curr->towercheck == TYPE_CASTLE)  {
            print_castle(curr->name,curr->hp);
        }     
    }
    
    
    // Note: you should use the provided print functions here.

}

////////////////////////////////////////////////////////////////////////
//                         Stage 2 Functions                          //
////////////////////////////////////////////////////////////////////////

// Add a new tower to the realm.
int new_tower(Realm realm, char *prev_name, char *name, int power, int uses) {
    // error check for power and uses
    if (power < 1 || uses < 1) {
        return ERROR_INVALID_STAT;
    }
    // Error check for finding location and output  
    
    if (find_location(realm,prev_name) == realm->castle) {
        return ERROR_NO_LOCATION;
    }
    struct location *tail = find_location(realm,prev_name);
    // inserting into the linked list
    struct location *tail2 = tail->next;
    struct location *tower_loc = new_location(name);
    // inserting tower in linked list
    tail->next = tower_loc;
    tower_loc->next = tail2;
    // assigning all values 
    tower_loc->towercheck = TYPE_TOWER;  
    tower_loc->power = power;
    tower_loc->uses = uses;
    tower_loc->effect = EFFECT_NONE;
    // assgining name to tower
    strcpy(tower_loc->name,name);
    
    return SUCCESS; 
}

// Add an enemy to the realm.
int new_enemy(Realm realm, char *location_name, char *name, int hp) {
    
    if (hp < 1 ) {
        return ERROR_INVALID_STAT;
    }
    //location error check and postion since error check has to be returned here 
    if (find_location(realm,location_name) == realm->castle) {
        return ERROR_NO_LOCATION;
    }
    
    struct location *tail = find_location(realm,location_name);
    // make a new node 
    struct enemy *new_enemy_copy = malloc(sizeof(struct enemy));

    struct enemy *enemy_tail = tail->enemies; 
    
    // assiging values
    new_enemy_copy->hp = hp;
    strcpy(new_enemy_copy->name,name);
    new_enemy_copy->enemycheck = 1;
    new_enemy_copy->next =NULL;
    //check if there us a enemy there 
    // make this a function 
    
    if (tail->enemies == NULL){
        tail->enemies= new_enemy_copy;
    }else {
            // if there is an enemy go to the end of the list and insert nod e
            // not working???? as expected 
        while (enemy_tail->next != NULL) {
            enemy_tail = enemy_tail->next;
        }
        enemy_tail->next = new_enemy_copy;   
    }
    return SUCCESS;
}

// Advance enemies towards the castle.
int advance_enemies(Realm realm) {
   
    int deleted = 0;
    struct location *tail = realm->lair;
    struct enemy *store = NULL;
    struct enemy *store2 = tail->enemies;
    // loops trough location
    while (tail != NULL) {
        // saves the old enemy 
        store2 = tail->enemies;
        // assgingng new location
        tail->enemies= store;
        store = store2;
       
        if (tail == realm->castle){
        // deletes enemies in the process of finding number of enimes deleted
            deleted = remove_enimies(realm,realm->castle);   
        }      
    tail = tail->next;
    }
    return deleted;
}

////////////////////////////////////////////////////////////////////////
//                         Stage 3 Functions                          //
////////////////////////////////////////////////////////////////////////

// Apply damage from the enemies at each tower to that tower.
int apply_damage(Realm realm) {
    struct location *curr = realm->lair;
    while (curr != realm->castle){
        if (curr->towercheck == TYPE_TOWER && curr->enemies !=NULL){
            
            damage_enemies(realm,curr);
            curr->uses--;
            
         
        }
        curr = curr->next;
    }
     
    return 0;

}


// Destroy the realm, and free any associated memory.
void destroy_realm(Realm realm) {

}

////////////////////////////////////////////////////////////////////////
//                         Stage 4 Functions                          //
////////////////////////////////////////////////////////////////////////

// Apply the specified buff to the relevant towers or enemies.
int apply_buff(Realm realm, char *search_term, Buff buff, int amount){
    return 0;
}

////////////////////////////////////////////////////////////////////////
//                         Stage 5 Functions                          //
////////////////////////////////////////////////////////////////////////

// Apply the specified effect to each tower whose name matches the
// specified search term.
int apply_effect(Realm realm, char *search_term, Effect effect) {
    return 0;
}

////////////////////////////////////////////////////////////////////////

// Add definitions for your own functions below.
// Make them static to limit their scope to this file.
// used often, to match a location to a name and give no locations outputs

 
static struct location *find_location(Realm realm, char *name){

    struct location *tail = realm->lair;
    while (strcmp(name,tail->name) != 0 && tail != realm->castle ) {
        tail = tail->next;
    }
    return tail;     
}
// removes enemies form the list (indiscriminate)
static int remove_enimies(Realm realm,Location tail){
    int num = 0;
    int deleted = 0;
    struct enemy *enemy_tail = tail->enemies;
    // counts amount of elements 
    while (enemy_tail != NULL) {
        enemy_tail= enemy_tail->next;
        num++;
    }
    deleted = num;
    // revers deletes the elements 
    while (num > 0){
        enemy_tail = tail->enemies;
        int counter = 0;
        while (counter < num){
            enemy_tail= enemy_tail->next;
            counter++;
        }
        free(enemy_tail);
        num--;
    }
    return deleted;
}
  
static void damage_enemies(Realm realm,Location curr){
    struct enemy *baddies = curr->enemies;
    while (baddies != NULL){
        // damages  the enemy by power of tower
        baddies->hp = baddies->hp - curr->power; 
        // checks for the first enemy in linked list and rmoves if low
        if (0 >= curr->enemies->hp){    
            struct enemy *new_head = curr->enemies->next;
            free(curr->enemies);
            curr->enemies = new_head;
        }
        // checks for the rest of the enimies 
        if (baddies->next != NULL){
            if (baddies->next->hp <= 0){
                struct enemy *delete = baddies->next;
                baddies->next =baddies->next->next;
                free(delete); 
            }
        }
        baddies = baddies->next;
    }    
}
////////////////////////////////////////////////////////////////////////
//                    Provided print functions                        //
//         NOTE: YOU SHOULD NOT MODIFY THE FOLLOWING FUNCTIONS        //
////////////////////////////////////////////////////////////////////////

static void print_tower(char *name, int power, int uses, int effect) {
    printf("%32s [pow: %3d | uses: %3d]", name, power, uses);
    if (effect == EFFECT_NONE) {
        printf(" {%c}", EFFECT_NONE_CHAR);
    } else if (effect == EFFECT_ICE) {
        printf(" {%c}", EFFECT_ICE_CHAR);
    } else if (effect == EFFECT_BOUNCE) {
        printf(" {%c}", EFFECT_BOUNCE_CHAR);
    }
    printf("\n");
}

static void print_land(char *name) {
    printf("%32s [____________________]\n", name);
}

static void print_castle(char *name, int defense) {
    printf("%32s [Castle Defenses: %3d]\n", name, defense);
}

static void print_enemy(char *name, int cur_hp, int max_hp) {
    printf("%40s [hp: %d/%d]\n", name, cur_hp, max_hp);
}

////////////////////////////////////////////////////////////////////////
//              End of provided print functions                        //
////////////////////////////////////////////////////////////////////////

